<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping auto-import="false">
  <class name="com.krishagni.catissueplus.core.biospecimen.domain.StagedParticipant" table="OS_STAGED_PARTICIPANTS" polymorphism="explicit">

    <id name="id" column="IDENTIFIER" type="long">
      <generator class="native">
        <param name="sequence">OS_STAGED_PARTICIPANTS_SEQ</param>
      </generator>
    </id>

    <property name="lastName" column="LAST_NAME" />

    <property name="firstName" column="FIRST_NAME" />

    <property name="middleName" column="MIDDLE_NAME" />

    <property name="birthDate" column="BIRTH_DATE" />

    <many-to-one name="gender" column="GENDER_ID" fetch="join"/>

    <property name="sexGenotype" column="GENOTYPE" />

    <property name="uid" column="NUID" unique="true" />

    <property name="activityStatus" column="ACTIVITY_STATUS" />

    <property name="deathDate" column="DEATH_DATE" />

    <many-to-one name="vitalStatus" column="VITAL_STATUS_ID" fetch="join"/>

    <property name="empi" column="EMPI_ID"/>
    
    <property name="updatedTime" column="UPDATED_TIME"/>

    <property name="source" column="SOURCE"/>
    
    <set name="pmiList" table="OS_STAGED_PART_MEDICAL_IDS" inverse="true" cascade="all-delete-orphan">
      <key column="PARTICIPANT_ID" />
      <one-to-many class="com.krishagni.catissueplus.core.biospecimen.domain.StagedParticipantMedicalIdentifier"/>
    </set>

    <set name="races" table="OS_STAGED_PARTICIPANT_RACES">
      <key column="PARTICIPANT_ID" />
      <many-to-many class="com.krishagni.catissueplus.core.administrative.domain.PermissibleValue" column="RACE_ID"/>
    </set>

    <set name="ethnicities" table="OS_STAGED_PART_ETHNICITIES">
      <key column="PARTICIPANT_ID" />
      <many-to-many class="com.krishagni.catissueplus.core.administrative.domain.PermissibleValue" column="ETHNICITY_ID"/>
    </set>

    <set name="visits" table="OS_STAGED_VISITS" inverse="true" cascade="all-delete-orphan">
      <key column="PARTICIPANT_ID"/>
      <one-to-many class="com.krishagni.catissueplus.core.biospecimen.domain.StagedVisit"/>
    </set>
    
    <query name="getByEmpi">
      from
        com.krishagni.catissueplus.core.biospecimen.domain.StagedParticipant p
      where
        lower(p.empi) = :empi
    </query>

    <query name="getByUid">
      select
        p
      from
        com.krishagni.catissueplus.core.biospecimen.domain.StagedParticipant p
      where
        lower(p.uid) = :uid
    </query>

    <query name="getByMrn">
      select
        p
      from
        com.krishagni.catissueplus.core.biospecimen.domain.StagedParticipant p
        join p.pmiList pmi
      where
        lower(pmi.medicalRecordNumber) = :mrn
    </query>

    <sql-query name="deleteOldParticipantPmis">
      <![CDATA[
        delete from
          os_staged_part_medical_ids
        where
          participant_id in (
            select
              p.identifier
            from
              os_staged_participants p
            where
              p.updated_time < :olderThanDt and
              not (exists (select v.identifier from os_staged_visits v where v.participant_id = p.identifier))
          )
      ]]>
    </sql-query>

    <sql-query name="deleteOldParticipantRaces">
      <![CDATA[
        delete from
          os_staged_participant_races
        where
          participant_id in (
            select
              p.identifier
            from
              os_staged_participants p
            where
              p.updated_time < :olderThanDt and
              not (exists (select v.identifier from os_staged_visits v where v.participant_id = p.identifier))
          )
      ]]>
    </sql-query>

    <sql-query name="deleteOldParticipantEthnicities">
      <![CDATA[
        delete from
          os_staged_part_ethnicities
        where
          participant_id in (
            select
              p.identifier
            from
              os_staged_participants p
            where
              p.updated_time < :olderThanDt and
              not (exists (select v.identifier from os_staged_visits v where v.participant_id = p.identifier))
          )
      ]]>
    </sql-query>

    <sql-query name="deleteOldParticipants">
      <![CDATA[
        delete from
          os_staged_participants
        where
          updated_time < :olderThanDt and
          not (exists (select v.identifier from os_staged_visits v where v.participant_id = os_staged_participants.identifier))
      ]]>
    </sql-query>
  </class>
</hibernate-mapping>
